name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Triggers on tags like 1.0.0, 2.3.4, etc.

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "${{ github.ref_name }}"
          # GitHub generiert automatisch Release Notes aus Commits und PRs
          generate_release_notes: true
          body: |
            ## üöÄ MC68000 Emulator Release ${{ github.ref_name }}
            
            ### üéØ Quick Start
            ```bash
            # GUI Version (empfohlen)
            ./mc68000-gui
            
            # CLI Version
            ./mc68000 --help
            ```
            
            ### üì¶ Downloads
            - **Windows**: `mc68000-emulator-windows.zip`
            - **Linux**: `mc68000-emulator-linux.tar.gz`
            
            ---
            
            **üìã Vollst√§ndige √Ñnderungshistorie siehe unten** ‚¨áÔ∏è
          draft: false
          prerelease: false

  build:
    name: Build for ${{ matrix.os }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            name: linux
          - os: windows-latest  
            target: x86_64-pc-windows-msvc
            archive: zip
            name: windows
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
          
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libxrandr-dev libxi-dev libgl1-mesa-dev
        
    - name: Build Release
      run: |
        cargo build --release --target ${{ matrix.target }} --bin mc68000
        cargo build --release --target ${{ matrix.target }} --bin mc68000-gui
        
    - name: Create Archive Directory
      run: mkdir -p release-artifacts
      
    - name: Copy Binaries (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cp target/${{ matrix.target }}/release/mc68000 release-artifacts/
        cp target/${{ matrix.target }}/release/mc68000-gui release-artifacts/
        cp README.md release-artifacts/
        
    - name: Copy Binaries (Windows)  
      if: matrix.os == 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/mc68000.exe release-artifacts/
        cp target/${{ matrix.target }}/release/mc68000-gui.exe release-artifacts/
        cp README.md release-artifacts/
        
    - name: Create Archive (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd release-artifacts
        tar -czf ../mc68000-emulator-${{ matrix.name }}.tar.gz *
        
    - name: Create Archive (Windows)
      if: matrix.os == 'windows-latest' 
      run: |
        cd release-artifacts
        Compress-Archive -Path * -DestinationPath ../mc68000-emulator-${{ matrix.name }}.zip
        
    - name: Upload Release Asset (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mc68000-emulator-${{ matrix.name }}.tar.gz
        asset_name: mc68000-emulator-${{ matrix.name }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mc68000-emulator-${{ matrix.name }}.zip
        asset_name: mc68000-emulator-${{ matrix.name }}.zip
        asset_content_type: application/zip